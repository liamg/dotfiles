; windows
(defwindow bar
  :monitor 0
  :hexpand false
  :vexpand false
  :geometry (geometry :x 0 :y 0 :width "100%")
  :anchor "top left"
  :reserve (struts :distance "10px" :side "top")
  (bar :screen 0))

(defwidget bar [screen]
  (box :orientation "h"
       :space-evenly false
       :class "bar"
    (box :halign "start"
         :space-evenly false
      (workspaces :screen "${screen}")
      (player))
    (box :halign "end"
         :spacing 12
         :hexpand true
         :space-evenly false
      ;(microphone)
      ;(speaker)
      ;(ping)
      ;(network)
      ;(disk)
      ;(ram)
      ;(nvidia)
      ;(cpu)
      (date)
      (time)
  )))


; vars
(defpoll time_poll :interval "1s" "date +%H:%M:%S")
(defpoll date_poll :interval "1m" "date +%Y-%m-%d")
(defpoll ping_poll :interval "10s" "./modules/ping.sh")

(deflisten workspaces_screen_0_listen "./bin/workspaces 0")
(deflisten workspaces_screen_1_listen "./bin/workspaces 1")
(deflisten player_listen "./scripts/player.sh")
(deflisten nvidia_listen "./modules/nvidia.sh")

(deflisten volume_in_listen "./scripts/volume_in.sh")
(deflisten volume_out_listen "./scripts/volume_out.sh")

; widgets
(defwidget icon-module [icon ?class ?visible]
  (box :class "${class} icon-module"
       :orientation "h"
       :halign "end"
       :space-evenly false
       :visible {visible ?: true} ; because the argument is optional
    (label :class "icon-module__icon" :text "${icon}")
    (children)))

(defwidget workspaces [screen]
  (literal :class "workspaces" :content "${screen == 0 ? workspaces_screen_0_listen : workspaces_screen_1_listen}"))

(defwidget player []
  (icon-module :class "player" :icon "" :visible { player_listen != "" }
    (label :text {player_listen})))

(defwidget ram []
  (icon-module :class "ram" :icon "" :visible {EWW_RAM.used_mem_perc != ""}
    (label :text "${round(EWW_RAM.used_mem_perc, 0)}%")))

(defwidget date []
  (icon-module :class "date" :icon "" 
    (label :text date_poll)))

(defwidget time []
  (icon-module :class "time" :icon "" 
    (label :text time_poll))) 

(defwidget nvidia []
  (icon-module :class "nvidia" :icon "" 
    (label :text nvidia_listen))) 

(defwidget cpu []
  (icon-module :class "cpu" :icon "" 
    (label :text "${round(EWW_CPU.avg, 0)}%"))) 

(defwidget disk []
  (icon-module :class "disk" :icon "" 
    (label :text "${round(EWW_DISK["/"].used_perc, 0)}%"))) 

(defwidget ping []
  (icon-module :class "ping" :icon ""
    (label :text ping_poll))) 

(defwidget network []
  (icon-module :class "network" :icon ""
    (label :text "${round(EWW_NET.enp42s0.NET_UP / 1000000, 2)}/${round(EWW_NET.enp42s0.NET_DOWN / 1000000, 2)}"))) 

;(defwidget speaker []
;  (icon-module :class "speaker"
;               :icon {speaker_poll.icon}
;    (eventbox :onscroll `eww update speaker_poll="$(./modules/speaker.sh {})"`
;      (button :onclick `eww update speaker_poll="$(./modules/speaker.sh toogle)"`
;        (label :text {speaker_poll.content})))))

;(defwidget microphone []
;  (icon-module :class "microphone"
;               :icon {microphone_poll.icon}
;    (eventbox :onscroll `eww update microphone_poll="$(./modules/microphone.sh {})"`
;      (button :onclick `eww update microphone_poll="$(./modules/microphone.sh toogle)"`
;        (label :text {microphone_poll.content})))))


