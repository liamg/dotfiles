; windows
(defwindow bar
  :monitor 0
  :hexpand false
  :vexpand false
  :geometry (geometry :x 0 :y 0 :width "100%")
  :anchor "top left"
  :reserve (struts :distance "10px" :side "top")
  (bar :screen "primary"))

(defwidget bar [screen]
  (centerbox :orientation "h"
       :space-evenly false
       :class "bar"
    (box :halign "start"
         :space-evenly false
      (workspaces :screen "${screen}")
      (player))
    (box :halign "center"
        :spacing 12
         :space-evenly false
         (datetime)
            )
    (box :halign "end"
         :spacing 12
         :hexpand true
         :space-evenly false
      (system)
      (networking)
  )))

; vars
(defpoll time_poll :interval "1s" "date +%H:%M:%S")
(defpoll date_poll :interval "1m" "date +%Y-%m-%d")
(defpoll weather :interval "1h" "./bin/weather Southampton,UK")
(defpoll interface_poll :interval "1m" "./scripts/interface.sh")

(deflisten workspaces_screen_primary_listen "./bin/workspaces primary")
(deflisten player_listen "./scripts/player.sh")
(deflisten player_status_listen "playerctl status -F")
(deflisten player_progress_listen "playerctl metadata --format "{{duration(position)}}/{{duration(mpris:length)}}" -F")


; widgets
(defwidget icon-module [icon ?class ?visible ?input]
  (box :class "${class} icon-module"
       :orientation "h"
       :halign "end"
       :space-evenly false
       :visible {visible ?: true} ; because the argument is optional
    (label :class "icon-module__icon" :text "${icon}")
    (children)))

(defwidget recess [?class ?visible]
    (box :class "${class} recess"
         :orientation "h"
         :halign "center"
         :space-evenly false
         :visible {visible ?: true}
    (children))
)

(defwidget datetime []
(recess
  (time)
  (date)
  (weather)
))

(defwidget metric [icon input ?onchange]
(icon-module :icon icon
       :class "metric"
       :input input
    (scale :class {input > 50 ? input > 75 ? "error" : "warning" : "normal"}
           :min 0
           :max 100
           :active true
           :value input
           :onchange onchange))
          )

(defwidget system []
(recess
    (disk)
      (ram)
      (cpu)
      ))

(defwidget networking []
(recess
      (network)
      ))

(defwidget workspaces [screen]
  (recess
  (literal :class "workspaces" :content workspaces_screen_primary_listen)))

(defwidget player []
    (recess :class "recess-highlight" :visible { player_listen != "" }
  (icon-module :class "player" :icon ""
    (label :text player_listen)
    (button
        :onclick "playerctl previous"
        (label :text "丹")
    )
    (button
            :visible {player_status_listen == "Paused" }
            :onclick "playerctl play"
            (label :text "")
    )
    (button
            :visible {player_status_listen == "Playing" }
            :onclick "playerctl pause"
            (label :text "")
    )
    (button
            :onclick "playerctl next"
            (label :text "")
    )
     (label :text player_progress_listen)
    )))

(defwidget date []
  (icon-module :class "date" :icon "" 
    (label :text date_poll)))

(defwidget time []
  (icon-module :class "time" :icon "" 
    (label :text time_poll))) 

(defwidget cpu []
    (metric :icon "" :input {round(EWW_CPU.avg, 0)}))

(defwidget disk []
    (metric :icon "" :input "${round(EWW_DISK["/"].used_perc, 0)}"))

(defwidget ram []
    (metric :icon "" :input "${round(EWW_RAM.used_mem_perc, 0)}"))

(defwidget network []
  (icon-module :class "network" :icon ""
    (label :text " ${round(EWW_NET[interface_poll].NET_UP / 1000000, 2)}  ${round(EWW_NET[interface_poll].NET_DOWN / 1000000, 2)} ")
    )
 )

(defwidget weather []  (icon-module :class "network" :icon "${weather.icon}"
                          (label :text "${weather.description}")
                          ))

